
TMC516_Test_Func.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002064  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800223c  0800223c  0001223c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002260  08002260  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002260  08002260  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002260  08002260  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002260  08002260  00012260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002264  08002264  00012264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08002274  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002274  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007870  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001619  00000000  00000000  000278ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f8  00000000  00000000  00028f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ee  00000000  00000000  00029700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ba70  00000000  00000000  00029cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000087ba  00000000  00000000  0004575e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aeb11  00000000  00000000  0004df18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f00  00000000  00000000  000fca2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000fe92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002224 	.word	0x08002224

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002224 	.word	0x08002224

08000218 <TMC5160_WriteRegister>:
#include "TMC5160.h"


HAL_StatusTypeDef TMC5160_WriteRegister(TMC5160_HandleTypeDef *htmc, TMC5160_Regs reg_addr, uint8_t data[]){
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	460b      	mov	r3, r1
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	72fb      	strb	r3, [r7, #11]
	  //reg_addr - т.к. это на write, первый бит -> 1
	  reg_addr |= 0b10000000;
 8000226:	7afb      	ldrb	r3, [r7, #11]
 8000228:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800022c:	72fb      	strb	r3, [r7, #11]
	  uint8_t buff[5];
	  buff[0] = reg_addr;
 800022e:	7afb      	ldrb	r3, [r7, #11]
 8000230:	743b      	strb	r3, [r7, #16]
	  buff[1] = data[0];
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	747b      	strb	r3, [r7, #17]
	  buff[2] = data[1];
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	785b      	ldrb	r3, [r3, #1]
 800023c:	74bb      	strb	r3, [r7, #18]
	  buff[3] = data[2];
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	789b      	ldrb	r3, [r3, #2]
 8000242:	74fb      	strb	r3, [r7, #19]
	  buff[4] = data[3];
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	78db      	ldrb	r3, [r3, #3]
 8000248:	753b      	strb	r3, [r7, #20]

	  //Receive
	  HAL_GPIO_WritePin(htmc->GPIOx,htmc->CS, GPIO_PIN_RESET);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	6858      	ldr	r0, [r3, #4]
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	891b      	ldrh	r3, [r3, #8]
 8000252:	2200      	movs	r2, #0
 8000254:	4619      	mov	r1, r3
 8000256:	f000 fe83 	bl	8000f60 <HAL_GPIO_WritePin>
	  HAL_StatusTypeDef result = HAL_SPI_Transmit(htmc->spi, buff, 5, 100);
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	6818      	ldr	r0, [r3, #0]
 800025e:	f107 0110 	add.w	r1, r7, #16
 8000262:	2364      	movs	r3, #100	; 0x64
 8000264:	2205      	movs	r2, #5
 8000266:	f001 fcde 	bl	8001c26 <HAL_SPI_Transmit>
 800026a:	4603      	mov	r3, r0
 800026c:	75fb      	strb	r3, [r7, #23]
	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4, GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	2110      	movs	r1, #16
 8000272:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000276:	f000 fe73 	bl	8000f60 <HAL_GPIO_WritePin>
	  return result;
 800027a:	7dfb      	ldrb	r3, [r7, #23]
}
 800027c:	4618      	mov	r0, r3
 800027e:	3718      	adds	r7, #24
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <TMC5160_Configuration>:
}

//  Configuration


HAL_StatusTypeDef TMC5160_Configuration(TMC5160_HandleTypeDef *htmc){
 8000284:	b5b0      	push	{r4, r5, r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]

	uint8_t cmd_init[5][4]= {
 800028c:	4b32      	ldr	r3, [pc, #200]	; (8000358 <TMC5160_Configuration+0xd4>)
 800028e:	f107 0408 	add.w	r4, r7, #8
 8000292:	461d      	mov	r5, r3
 8000294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000298:	682b      	ldr	r3, [r5, #0]
 800029a:	6023      	str	r3, [r4, #0]
			{0x00, 0x00, 0x00, 0x0A},
			{0x00, 0x00, 0x00, 0x04},
			{0x00, 0x00, 0x01, 0xF4},
	};
	// Костыль, который отправляет первую посылку данных, так как первая  посылка с одного раза не отправляется
	HAL_StatusTypeDef result = TMC5160_WriteRegister(htmc, CHOPCONF, cmd_init[0]);
 800029c:	f107 0308 	add.w	r3, r7, #8
 80002a0:	461a      	mov	r2, r3
 80002a2:	216c      	movs	r1, #108	; 0x6c
 80002a4:	6878      	ldr	r0, [r7, #4]
 80002a6:	f7ff ffb7 	bl	8000218 <TMC5160_WriteRegister>
 80002aa:	4603      	mov	r3, r0
 80002ac:	77fb      	strb	r3, [r7, #31]

	if(result != HAL_OK){
 80002ae:	7ffb      	ldrb	r3, [r7, #31]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <TMC5160_Configuration+0x34>
				return result;
 80002b4:	7ffb      	ldrb	r3, [r7, #31]
 80002b6:	e04a      	b.n	800034e <TMC5160_Configuration+0xca>
		}

	result = TMC5160_WriteRegister(htmc, CHOPCONF, cmd_init[0]);
 80002b8:	f107 0308 	add.w	r3, r7, #8
 80002bc:	461a      	mov	r2, r3
 80002be:	216c      	movs	r1, #108	; 0x6c
 80002c0:	6878      	ldr	r0, [r7, #4]
 80002c2:	f7ff ffa9 	bl	8000218 <TMC5160_WriteRegister>
 80002c6:	4603      	mov	r3, r0
 80002c8:	77fb      	strb	r3, [r7, #31]

	if(result != HAL_OK){
 80002ca:	7ffb      	ldrb	r3, [r7, #31]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <TMC5160_Configuration+0x50>
			return result;
 80002d0:	7ffb      	ldrb	r3, [r7, #31]
 80002d2:	e03c      	b.n	800034e <TMC5160_Configuration+0xca>
	}

	result = TMC5160_WriteRegister(htmc, IHOLD_IRUN, cmd_init[1]);
 80002d4:	f107 0308 	add.w	r3, r7, #8
 80002d8:	3304      	adds	r3, #4
 80002da:	461a      	mov	r2, r3
 80002dc:	2110      	movs	r1, #16
 80002de:	6878      	ldr	r0, [r7, #4]
 80002e0:	f7ff ff9a 	bl	8000218 <TMC5160_WriteRegister>
 80002e4:	4603      	mov	r3, r0
 80002e6:	77fb      	strb	r3, [r7, #31]

	if(result != HAL_OK){
 80002e8:	7ffb      	ldrb	r3, [r7, #31]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <TMC5160_Configuration+0x6e>
				return result;
 80002ee:	7ffb      	ldrb	r3, [r7, #31]
 80002f0:	e02d      	b.n	800034e <TMC5160_Configuration+0xca>
	}

	result = TMC5160_WriteRegister(htmc, TPOWERDOWN, cmd_init[2]);
 80002f2:	f107 0308 	add.w	r3, r7, #8
 80002f6:	3308      	adds	r3, #8
 80002f8:	461a      	mov	r2, r3
 80002fa:	2111      	movs	r1, #17
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f7ff ff8b 	bl	8000218 <TMC5160_WriteRegister>
 8000302:	4603      	mov	r3, r0
 8000304:	77fb      	strb	r3, [r7, #31]

	if(result != HAL_OK){
 8000306:	7ffb      	ldrb	r3, [r7, #31]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <TMC5160_Configuration+0x8c>
		return result;
 800030c:	7ffb      	ldrb	r3, [r7, #31]
 800030e:	e01e      	b.n	800034e <TMC5160_Configuration+0xca>
	}

	result = TMC5160_WriteRegister(htmc, GCONF, cmd_init[3]);
 8000310:	f107 0308 	add.w	r3, r7, #8
 8000314:	330c      	adds	r3, #12
 8000316:	461a      	mov	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	6878      	ldr	r0, [r7, #4]
 800031c:	f7ff ff7c 	bl	8000218 <TMC5160_WriteRegister>
 8000320:	4603      	mov	r3, r0
 8000322:	77fb      	strb	r3, [r7, #31]

	if(result != HAL_OK){
 8000324:	7ffb      	ldrb	r3, [r7, #31]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <TMC5160_Configuration+0xaa>
				return result;
 800032a:	7ffb      	ldrb	r3, [r7, #31]
 800032c:	e00f      	b.n	800034e <TMC5160_Configuration+0xca>
	}

	result = TMC5160_WriteRegister(htmc,  TPWMTHRS, cmd_init[4]);
 800032e:	f107 0308 	add.w	r3, r7, #8
 8000332:	3310      	adds	r3, #16
 8000334:	461a      	mov	r2, r3
 8000336:	2113      	movs	r1, #19
 8000338:	6878      	ldr	r0, [r7, #4]
 800033a:	f7ff ff6d 	bl	8000218 <TMC5160_WriteRegister>
 800033e:	4603      	mov	r3, r0
 8000340:	77fb      	strb	r3, [r7, #31]

	if(result != HAL_OK){
 8000342:	7ffb      	ldrb	r3, [r7, #31]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <TMC5160_Configuration+0xc8>
				return result;
 8000348:	7ffb      	ldrb	r3, [r7, #31]
 800034a:	e000      	b.n	800034e <TMC5160_Configuration+0xca>
	}
	return result ;
 800034c:	7ffb      	ldrb	r3, [r7, #31]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3720      	adds	r7, #32
 8000352:	46bd      	mov	sp, r7
 8000354:	bdb0      	pop	{r4, r5, r7, pc}
 8000356:	bf00      	nop
 8000358:	0800223c 	.word	0x0800223c

0800035c <divide_uint32_t>:



// Transform data
void  divide_uint32_t(uint32_t value, uint8_t *data){
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
    data[0]  = (uint8_t)(value >> 24);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	0e1b      	lsrs	r3, r3, #24
 800036a:	b2da      	uxtb	r2, r3
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	701a      	strb	r2, [r3, #0]
    data[1]  = (uint8_t)(value >> 16);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	0c1a      	lsrs	r2, r3, #16
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	3301      	adds	r3, #1
 8000378:	b2d2      	uxtb	r2, r2
 800037a:	701a      	strb	r2, [r3, #0]
    data[2]  = (uint8_t)(value >> 8);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	0a1a      	lsrs	r2, r3, #8
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	3302      	adds	r3, #2
 8000384:	b2d2      	uxtb	r2, r2
 8000386:	701a      	strb	r2, [r3, #0]
    data[3]  = (uint8_t)(value >> 0);
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	3303      	adds	r3, #3
 800038c:	687a      	ldr	r2, [r7, #4]
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	701a      	strb	r2, [r3, #0]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr

0800039e <TMC5160_setFirstAcceleration>:

// Drive functions
HAL_StatusTypeDef TMC5160_setFirstAcceleration(TMC5160_HandleTypeDef *htmc, uint16_t value){
 800039e:	b580      	push	{r7, lr}
 80003a0:	b082      	sub	sp, #8
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
 80003a6:	460b      	mov	r3, r1
 80003a8:	807b      	strh	r3, [r7, #2]
if((value > TMC5160_FIRST_ACCELERATION_LIMIT) || (value < 0) ){
		return HAL_ERROR;
	}
	divide_uint32_t(value, htmc->first_acceleration);
 80003aa:	887a      	ldrh	r2, [r7, #2]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3316      	adds	r3, #22
 80003b0:	4619      	mov	r1, r3
 80003b2:	4610      	mov	r0, r2
 80003b4:	f7ff ffd2 	bl	800035c <divide_uint32_t>
	return HAL_OK;
 80003b8:	2300      	movs	r3, #0
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <TMC5160_setMaxAcceleration>:


HAL_StatusTypeDef TMC5160_setMaxAcceleration(TMC5160_HandleTypeDef *htmc, uint16_t value){
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b082      	sub	sp, #8
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
 80003ca:	460b      	mov	r3, r1
 80003cc:	807b      	strh	r3, [r7, #2]
  if((value > TMC5160_MAX_ACCELERATION_LIMIT) || (value < 0) ){
		return HAL_ERROR;
	}

	divide_uint32_t(value, htmc->max_acceleration );
 80003ce:	887a      	ldrh	r2, [r7, #2]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3322      	adds	r3, #34	; 0x22
 80003d4:	4619      	mov	r1, r3
 80003d6:	4610      	mov	r0, r2
 80003d8:	f7ff ffc0 	bl	800035c <divide_uint32_t>
	return HAL_OK;
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <TMC5160_setMaxDeceleration>:
//
HAL_StatusTypeDef TMC5160_setMaxDeceleration(TMC5160_HandleTypeDef *htmc, uint16_t value){
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b082      	sub	sp, #8
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6078      	str	r0, [r7, #4]
 80003ee:	460b      	mov	r3, r1
 80003f0:	807b      	strh	r3, [r7, #2]
  if((value > TMC5160_MAX_DECELERATION_LIMIT) || (value < 0) ){
		return HAL_ERROR;
	}
	divide_uint32_t(value, htmc->max_deceleration  );
 80003f2:	887a      	ldrh	r2, [r7, #2]
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	331a      	adds	r3, #26
 80003f8:	4619      	mov	r1, r3
 80003fa:	4610      	mov	r0, r2
 80003fc:	f7ff ffae 	bl	800035c <divide_uint32_t>
	return HAL_OK;
 8000400:	2300      	movs	r3, #0
}
 8000402:	4618      	mov	r0, r3
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <TMC5160_setSecondDeceleration>:

HAL_StatusTypeDef TMC5160_setSecondDeceleration(TMC5160_HandleTypeDef *htmc, uint16_t value){
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	460b      	mov	r3, r1
 8000414:	807b      	strh	r3, [r7, #2]
  if((value > TMC5160_SECOND_DECELERATION_LIMIT) || (value < 0) ){
		return HAL_ERROR;
	}
	divide_uint32_t(value, htmc->second_deceleration);
 8000416:	887a      	ldrh	r2, [r7, #2]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	331e      	adds	r3, #30
 800041c:	4619      	mov	r1, r3
 800041e:	4610      	mov	r0, r2
 8000420:	f7ff ff9c 	bl	800035c <divide_uint32_t>
	return HAL_OK;
 8000424:	2300      	movs	r3, #0
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <TMC5160_setStopVelocity>:

HAL_StatusTypeDef TMC5160_setStopVelocity(TMC5160_HandleTypeDef *htmc, uint32_t value){
 800042e:	b580      	push	{r7, lr}
 8000430:	b082      	sub	sp, #8
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
 8000436:	6039      	str	r1, [r7, #0]
  if((value > TMC5160_STOP_VELOCITY_LIMIT) || (value < 0) ){
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800043e:	d301      	bcc.n	8000444 <TMC5160_setStopVelocity+0x16>
		return HAL_ERROR;
 8000440:	2301      	movs	r3, #1
 8000442:	e006      	b.n	8000452 <TMC5160_setStopVelocity+0x24>
	}
	divide_uint32_t(value, htmc->stop_speed);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	330e      	adds	r3, #14
 8000448:	4619      	mov	r1, r3
 800044a:	6838      	ldr	r0, [r7, #0]
 800044c:	f7ff ff86 	bl	800035c <divide_uint32_t>
	return HAL_OK;
 8000450:	2300      	movs	r3, #0
}
 8000452:	4618      	mov	r0, r3
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <TMC5160_setFirstVelocity>:

HAL_StatusTypeDef TMC5160_setFirstVelocity(TMC5160_HandleTypeDef *htmc, uint32_t value){
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
 8000462:	6039      	str	r1, [r7, #0]
  if((value > TMC5160_FIRST_VELOCITY_LIMIT) || (value < 0) ){
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800046a:	d301      	bcc.n	8000470 <TMC5160_setFirstVelocity+0x16>
		return HAL_ERROR;
 800046c:	2301      	movs	r3, #1
 800046e:	e006      	b.n	800047e <TMC5160_setFirstVelocity+0x24>
	}
	divide_uint32_t(value, htmc->first_speed);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3312      	adds	r3, #18
 8000474:	4619      	mov	r1, r3
 8000476:	6838      	ldr	r0, [r7, #0]
 8000478:	f7ff ff70 	bl	800035c <divide_uint32_t>
	return HAL_OK;
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
	...

08000488 <TMC5160_setMaxVelocity>:

HAL_StatusTypeDef TMC5160_setMaxVelocity(TMC5160_HandleTypeDef *htmc, uint32_t value){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
  if((value > TMC5160_MAX_VELOCITY_LIMIT) || (value < 0) ){
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <TMC5160_setMaxVelocity+0x2c>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d901      	bls.n	800049e <TMC5160_setMaxVelocity+0x16>
		return HAL_ERROR;
 800049a:	2301      	movs	r3, #1
 800049c:	e006      	b.n	80004ac <TMC5160_setMaxVelocity+0x24>
	}
	divide_uint32_t(value, htmc->max_speed);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	330a      	adds	r3, #10
 80004a2:	4619      	mov	r1, r3
 80004a4:	6838      	ldr	r0, [r7, #0]
 80004a6:	f7ff ff59 	bl	800035c <divide_uint32_t>
	return HAL_OK;
 80004aa:	2300      	movs	r3, #0
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	007ffe00 	.word	0x007ffe00

080004b8 <TMC5160_setRampMode>:

HAL_StatusTypeDef TMC5160_setRampMode(TMC5160_HandleTypeDef *htmc, RampModes mode){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
 	divide_uint32_t(mode, htmc->ramp_mode);
 80004c4:	78fa      	ldrb	r2, [r7, #3]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3326      	adds	r3, #38	; 0x26
 80004ca:	4619      	mov	r1, r3
 80004cc:	4610      	mov	r0, r2
 80004ce:	f7ff ff45 	bl	800035c <divide_uint32_t>
	return HAL_OK;
 80004d2:	2300      	movs	r3, #0
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}

080004dc <TMC5160_Configuration_Drive>:
// Configuration Drive
HAL_StatusTypeDef TMC5160_Configuration_Drive(TMC5160_HandleTypeDef *htmc){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	TMC5160_setFirstAcceleration(htmc,1000);
 80004e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f7ff ff58 	bl	800039e <TMC5160_setFirstAcceleration>
	TMC5160_setFirstVelocity(htmc,50000);
 80004ee:	f24c 3150 	movw	r1, #50000	; 0xc350
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	f7ff ffb1 	bl	800045a <TMC5160_setFirstVelocity>
	TMC5160_setMaxAcceleration(htmc,500);
 80004f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff ff60 	bl	80003c2 <TMC5160_setMaxAcceleration>
	TMC5160_setMaxVelocity(htmc,200000);
 8000502:	490d      	ldr	r1, [pc, #52]	; (8000538 <TMC5160_Configuration_Drive+0x5c>)
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff ffbf 	bl	8000488 <TMC5160_setMaxVelocity>
	TMC5160_setMaxDeceleration(htmc,700);
 800050a:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 800050e:	6878      	ldr	r0, [r7, #4]
 8000510:	f7ff ff69 	bl	80003e6 <TMC5160_setMaxDeceleration>
	TMC5160_setSecondDeceleration(htmc,1400);
 8000514:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f7ff ff76 	bl	800040a <TMC5160_setSecondDeceleration>
	TMC5160_setStopVelocity(htmc,10);
 800051e:	210a      	movs	r1, #10
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f7ff ff84 	bl	800042e <TMC5160_setStopVelocity>
	TMC5160_setRampMode(htmc, Positioning);
 8000526:	2100      	movs	r1, #0
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f7ff ffc5 	bl	80004b8 <TMC5160_setRampMode>
	return HAL_OK;
 800052e:	2300      	movs	r3, #0
}
 8000530:	4618      	mov	r0, r3
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	00030d40 	.word	0x00030d40

0800053c <TMC5160_default_init>:

// Default Configurations
HAL_StatusTypeDef TMC5160_default_init(TMC5160_HandleTypeDef *htmc){
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef result  =   TMC5160_Configuration_Drive(htmc);
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff ffc9 	bl	80004dc <TMC5160_Configuration_Drive>
 800054a:	4603      	mov	r3, r0
 800054c:	73fb      	strb	r3, [r7, #15]
	if(result != HAL_OK){
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <TMC5160_default_init+0x1c>
				return result;
 8000554:	7bfb      	ldrb	r3, [r7, #15]
 8000556:	e07a      	b.n	800064e <TMC5160_default_init+0x112>
			}
	result = TMC5160_Configuration(htmc);
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f7ff fe93 	bl	8000284 <TMC5160_Configuration>
 800055e:	4603      	mov	r3, r0
 8000560:	73fb      	strb	r3, [r7, #15]
	if(result != HAL_OK){
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <TMC5160_default_init+0x30>
			return result;
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	e070      	b.n	800064e <TMC5160_default_init+0x112>
		}
	result = TMC5160_WriteRegister(htmc, A1, htmc->first_acceleration);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3316      	adds	r3, #22
 8000570:	461a      	mov	r2, r3
 8000572:	2124      	movs	r1, #36	; 0x24
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f7ff fe4f 	bl	8000218 <TMC5160_WriteRegister>
 800057a:	4603      	mov	r3, r0
 800057c:	73fb      	strb	r3, [r7, #15]
	if(result != HAL_OK){
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <TMC5160_default_init+0x4c>
				return result;
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	e062      	b.n	800064e <TMC5160_default_init+0x112>
			}
	result = TMC5160_WriteRegister(htmc, V1, htmc->first_speed);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3312      	adds	r3, #18
 800058c:	461a      	mov	r2, r3
 800058e:	2125      	movs	r1, #37	; 0x25
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f7ff fe41 	bl	8000218 <TMC5160_WriteRegister>
 8000596:	4603      	mov	r3, r0
 8000598:	73fb      	strb	r3, [r7, #15]
	if(result != HAL_OK){
 800059a:	7bfb      	ldrb	r3, [r7, #15]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <TMC5160_default_init+0x68>
				return result;
 80005a0:	7bfb      	ldrb	r3, [r7, #15]
 80005a2:	e054      	b.n	800064e <TMC5160_default_init+0x112>
			}
	result = TMC5160_WriteRegister(htmc, AMAX, htmc->max_acceleration);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3322      	adds	r3, #34	; 0x22
 80005a8:	461a      	mov	r2, r3
 80005aa:	2126      	movs	r1, #38	; 0x26
 80005ac:	6878      	ldr	r0, [r7, #4]
 80005ae:	f7ff fe33 	bl	8000218 <TMC5160_WriteRegister>
 80005b2:	4603      	mov	r3, r0
 80005b4:	73fb      	strb	r3, [r7, #15]
	if(result != HAL_OK){
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <TMC5160_default_init+0x84>
				return result;
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	e046      	b.n	800064e <TMC5160_default_init+0x112>
			}
	result = TMC5160_WriteRegister(htmc, VMAX, htmc->max_speed);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	330a      	adds	r3, #10
 80005c4:	461a      	mov	r2, r3
 80005c6:	2127      	movs	r1, #39	; 0x27
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff fe25 	bl	8000218 <TMC5160_WriteRegister>
 80005ce:	4603      	mov	r3, r0
 80005d0:	73fb      	strb	r3, [r7, #15]
	if(result != HAL_OK){
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <TMC5160_default_init+0xa0>
				return result;
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	e038      	b.n	800064e <TMC5160_default_init+0x112>
			}
	result = TMC5160_WriteRegister(htmc, DMAX, htmc->max_deceleration);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	331a      	adds	r3, #26
 80005e0:	461a      	mov	r2, r3
 80005e2:	2128      	movs	r1, #40	; 0x28
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff fe17 	bl	8000218 <TMC5160_WriteRegister>
 80005ea:	4603      	mov	r3, r0
 80005ec:	73fb      	strb	r3, [r7, #15]
	if(result != HAL_OK){
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <TMC5160_default_init+0xbc>
				return result;
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	e02a      	b.n	800064e <TMC5160_default_init+0x112>
			}
	result = TMC5160_WriteRegister(htmc, D1, htmc->second_deceleration);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	331e      	adds	r3, #30
 80005fc:	461a      	mov	r2, r3
 80005fe:	212a      	movs	r1, #42	; 0x2a
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f7ff fe09 	bl	8000218 <TMC5160_WriteRegister>
 8000606:	4603      	mov	r3, r0
 8000608:	73fb      	strb	r3, [r7, #15]
	if(result != HAL_OK){
 800060a:	7bfb      	ldrb	r3, [r7, #15]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <TMC5160_default_init+0xd8>
				return result;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	e01c      	b.n	800064e <TMC5160_default_init+0x112>
			}
	result = TMC5160_WriteRegister(htmc, VSTOP, htmc->stop_speed);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	330e      	adds	r3, #14
 8000618:	461a      	mov	r2, r3
 800061a:	212b      	movs	r1, #43	; 0x2b
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f7ff fdfb 	bl	8000218 <TMC5160_WriteRegister>
 8000622:	4603      	mov	r3, r0
 8000624:	73fb      	strb	r3, [r7, #15]
	if(result != HAL_OK){
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <TMC5160_default_init+0xf4>
				return result;
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	e00e      	b.n	800064e <TMC5160_default_init+0x112>
			}
	result = TMC5160_WriteRegister(htmc, RAMPMODE, htmc->ramp_mode);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3326      	adds	r3, #38	; 0x26
 8000634:	461a      	mov	r2, r3
 8000636:	2120      	movs	r1, #32
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff fded 	bl	8000218 <TMC5160_WriteRegister>
 800063e:	4603      	mov	r3, r0
 8000640:	73fb      	strb	r3, [r7, #15]
	if(result != HAL_OK){
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <TMC5160_default_init+0x110>
				return result;
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	e000      	b.n	800064e <TMC5160_default_init+0x112>
			}
	return HAL_OK;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08c      	sub	sp, #48	; 0x30
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 f9a8 	bl	80009b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f819 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f895 	bl	8000794 <MX_GPIO_Init>
  MX_SPI1_Init();
 800066a:	f000 f855 	bl	8000718 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  TMC5160_HandleTypeDef htmc = { &hspi1, GPIOA, SPI1_NSS_Pin};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	222c      	movs	r2, #44	; 0x2c
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fda9 	bl	80021cc <memset>
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <main+0x3c>)
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	2310      	movs	r3, #16
 8000686:	81bb      	strh	r3, [r7, #12]
  TMC5160_default_init(&htmc);
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff56 	bl	800053c <TMC5160_default_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000690:	e7fe      	b.n	8000690 <main+0x38>
 8000692:	bf00      	nop
 8000694:	20000028 	.word	0x20000028

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0318 	add.w	r3, r7, #24
 80006a2:	2238      	movs	r2, #56	; 0x38
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fd90 	bl	80021cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006be:	f000 fc67 	bl	8000f90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2340      	movs	r3, #64	; 0x40
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0318 	add.w	r3, r7, #24
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fcfd 	bl	80010d8 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006e4:	f000 f894 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ec:	2301      	movs	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f801 	bl	8001708 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800070c:	f000 f880 	bl	8000810 <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3750      	adds	r7, #80	; 0x50
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_SPI1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_SPI1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_SPI1_Init+0x74>)
 8000724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_SPI1_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI1_Init+0x74>)
 8000732:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000736:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_SPI1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI1_Init+0x74>)
 8000746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI1_Init+0x74>)
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_SPI1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI1_Init+0x74>)
 8000766:	2207      	movs	r2, #7
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI1_Init+0x74>)
 8000772:	2208      	movs	r2, #8
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_SPI1_Init+0x74>)
 8000778:	f001 f9aa 	bl	8001ad0 <HAL_SPI_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 f845 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000028 	.word	0x20000028
 8000790:	40013000 	.word	0x40013000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_GPIO_Init+0x78>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_GPIO_Init+0x78>)
 80007b0:	f043 0320 	orr.w	r3, r3, #32
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_GPIO_Init+0x78>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0320 	and.w	r3, r3, #32
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_GPIO_Init+0x78>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a11      	ldr	r2, [pc, #68]	; (800080c <MX_GPIO_Init+0x78>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_GPIO_Init+0x78>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2110      	movs	r1, #16
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f000 fbbd 	bl	8000f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80007e6:	2310      	movs	r3, #16
 80007e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4619      	mov	r1, r3
 80007fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000800:	f000 fa2c 	bl	8000c5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40021000 	.word	0x40021000

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x44>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_MspInit+0x44>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6613      	str	r3, [r2, #96]	; 0x60
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x44>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x44>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6593      	str	r3, [r2, #88]	; 0x58
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_SPI_MspInit+0x7c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d128      	bne.n	80008d8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <HAL_SPI_MspInit+0x80>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <HAL_SPI_MspInit+0x80>)
 800088c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000890:	6613      	str	r3, [r2, #96]	; 0x60
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_SPI_MspInit+0x80>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_SPI_MspInit+0x80>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4a10      	ldr	r2, [pc, #64]	; (80008e4 <HAL_SPI_MspInit+0x80>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_SPI_MspInit+0x80>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008b6:	23e0      	movs	r3, #224	; 0xe0
 80008b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c6:	2305      	movs	r3, #5
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d4:	f000 f9c2 	bl	8000c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40013000 	.word	0x40013000
 80008e4:	40021000 	.word	0x40021000

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f890 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <SystemInit+0x20>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <SystemInit+0x20>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000962:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopForever+0x6>)
  ldr r1, =_edata
 8000966:	490e      	ldr	r1, [pc, #56]	; (80009a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <LoopForever+0xe>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800097c:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <LoopForever+0x16>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800098a:	f7ff ffd7 	bl	800093c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098e:	f001 fc25 	bl	80021dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000992:	f7ff fe61 	bl	8000658 <main>

08000996 <LoopForever>:

LoopForever:
    b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   r0, =_estack
 8000998:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a4:	08002268 	.word	0x08002268
  ldr r2, =_sbss
 80009a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ac:	20000090 	.word	0x20000090

080009b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_2_IRQHandler>

080009b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009b8:	2300      	movs	r3, #0
 80009ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 f91b 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c2:	200f      	movs	r0, #15
 80009c4:	f000 f80e 	bl	80009e4 <HAL_InitTick>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	71fb      	strb	r3, [r7, #7]
 80009d2:	e001      	b.n	80009d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009d4:	f7ff ff22 	bl	800081c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d8:	79fb      	ldrb	r3, [r7, #7]

}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <HAL_InitTick+0x68>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d022      	beq.n	8000a3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <HAL_InitTick+0x6c>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_InitTick+0x68>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 f918 	bl	8000c42 <HAL_SYSTICK_Config>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d10f      	bne.n	8000a38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b0f      	cmp	r3, #15
 8000a1c:	d809      	bhi.n	8000a32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	f04f 30ff 	mov.w	r0, #4294967295
 8000a26:	f000 f8f2 	bl	8000c0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_InitTick+0x70>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	e007      	b.n	8000a42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	73fb      	strb	r3, [r7, #15]
 8000a36:	e004      	b.n	8000a42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	73fb      	strb	r3, [r7, #15]
 8000a3c:	e001      	b.n	8000a42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x1c>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x20>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4413      	add	r3, r2
 8000a66:	4a03      	ldr	r2, [pc, #12]	; (8000a74 <HAL_IncTick+0x1c>)
 8000a68:	6013      	str	r3, [r2, #0]
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	2000008c 	.word	0x2000008c
 8000a78:	20000008 	.word	0x20000008

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b03      	ldr	r3, [pc, #12]	; (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	2000008c 	.word	0x2000008c

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	; (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	; (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	; 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc4:	d301      	bcc.n	8000bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00f      	b.n	8000bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <SysTick_Config+0x40>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f7ff ff8e 	bl	8000af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <SysTick_Config+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Config+0x40>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff47 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff5e 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff90 	bl	8000b4c <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff5f 	bl	8000af8 <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffb2 	bl	8000bb4 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c6a:	e15a      	b.n	8000f22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 814c 	beq.w	8000f1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d005      	beq.n	8000c9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d130      	bne.n	8000cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	091b      	lsrs	r3, r3, #4
 8000ce8:	f003 0201 	and.w	r2, r3, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d017      	beq.n	8000d3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d123      	bne.n	8000d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	08da      	lsrs	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	6939      	ldr	r1, [r7, #16]
 8000d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0203 	and.w	r2, r3, #3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 80a6 	beq.w	8000f1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd0:	4b5b      	ldr	r3, [pc, #364]	; (8000f40 <HAL_GPIO_Init+0x2e4>)
 8000dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd4:	4a5a      	ldr	r2, [pc, #360]	; (8000f40 <HAL_GPIO_Init+0x2e4>)
 8000dd6:	f043 0301 	orr.w	r3, r3, #1
 8000dda:	6613      	str	r3, [r2, #96]	; 0x60
 8000ddc:	4b58      	ldr	r3, [pc, #352]	; (8000f40 <HAL_GPIO_Init+0x2e4>)
 8000dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000de8:	4a56      	ldr	r2, [pc, #344]	; (8000f44 <HAL_GPIO_Init+0x2e8>)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e12:	d01f      	beq.n	8000e54 <HAL_GPIO_Init+0x1f8>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a4c      	ldr	r2, [pc, #304]	; (8000f48 <HAL_GPIO_Init+0x2ec>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d019      	beq.n	8000e50 <HAL_GPIO_Init+0x1f4>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a4b      	ldr	r2, [pc, #300]	; (8000f4c <HAL_GPIO_Init+0x2f0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d013      	beq.n	8000e4c <HAL_GPIO_Init+0x1f0>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a4a      	ldr	r2, [pc, #296]	; (8000f50 <HAL_GPIO_Init+0x2f4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d00d      	beq.n	8000e48 <HAL_GPIO_Init+0x1ec>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a49      	ldr	r2, [pc, #292]	; (8000f54 <HAL_GPIO_Init+0x2f8>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d007      	beq.n	8000e44 <HAL_GPIO_Init+0x1e8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a48      	ldr	r2, [pc, #288]	; (8000f58 <HAL_GPIO_Init+0x2fc>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d101      	bne.n	8000e40 <HAL_GPIO_Init+0x1e4>
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	e00a      	b.n	8000e56 <HAL_GPIO_Init+0x1fa>
 8000e40:	2306      	movs	r3, #6
 8000e42:	e008      	b.n	8000e56 <HAL_GPIO_Init+0x1fa>
 8000e44:	2304      	movs	r3, #4
 8000e46:	e006      	b.n	8000e56 <HAL_GPIO_Init+0x1fa>
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e004      	b.n	8000e56 <HAL_GPIO_Init+0x1fa>
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	e002      	b.n	8000e56 <HAL_GPIO_Init+0x1fa>
 8000e50:	2301      	movs	r3, #1
 8000e52:	e000      	b.n	8000e56 <HAL_GPIO_Init+0x1fa>
 8000e54:	2300      	movs	r3, #0
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	f002 0203 	and.w	r2, r2, #3
 8000e5c:	0092      	lsls	r2, r2, #2
 8000e5e:	4093      	lsls	r3, r2
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e66:	4937      	ldr	r1, [pc, #220]	; (8000f44 <HAL_GPIO_Init+0x2e8>)
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	089b      	lsrs	r3, r3, #2
 8000e6c:	3302      	adds	r3, #2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e74:	4b39      	ldr	r3, [pc, #228]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e98:	4a30      	ldr	r2, [pc, #192]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e9e:	4b2f      	ldr	r3, [pc, #188]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ec2:	4a26      	ldr	r2, [pc, #152]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f16:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <HAL_GPIO_Init+0x300>)
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f47f ae9d 	bne.w	8000c6c <HAL_GPIO_Init+0x10>
  }
}
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	371c      	adds	r7, #28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	48000400 	.word	0x48000400
 8000f4c:	48000800 	.word	0x48000800
 8000f50:	48000c00 	.word	0x48000c00
 8000f54:	48001000 	.word	0x48001000
 8000f58:	48001400 	.word	0x48001400
 8000f5c:	40010400 	.word	0x40010400

08000f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f70:	787b      	ldrb	r3, [r7, #1]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f76:	887a      	ldrh	r2, [r7, #2]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f7e:	887a      	ldrh	r2, [r7, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d141      	bne.n	8001022 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f9e:	4b4b      	ldr	r3, [pc, #300]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000faa:	d131      	bne.n	8001010 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fac:	4b47      	ldr	r3, [pc, #284]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fb2:	4a46      	ldr	r2, [pc, #280]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fbc:	4b43      	ldr	r3, [pc, #268]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fc4:	4a41      	ldr	r2, [pc, #260]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fcc:	4b40      	ldr	r3, [pc, #256]	; (80010d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2232      	movs	r2, #50	; 0x32
 8000fd2:	fb02 f303 	mul.w	r3, r2, r3
 8000fd6:	4a3f      	ldr	r2, [pc, #252]	; (80010d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fdc:	0c9b      	lsrs	r3, r3, #18
 8000fde:	3301      	adds	r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fe2:	e002      	b.n	8000fea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fea:	4b38      	ldr	r3, [pc, #224]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff6:	d102      	bne.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f2      	bne.n	8000fe4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100a:	d158      	bne.n	80010be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e057      	b.n	80010c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001010:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001016:	4a2d      	ldr	r2, [pc, #180]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800101c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001020:	e04d      	b.n	80010be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001028:	d141      	bne.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800102a:	4b28      	ldr	r3, [pc, #160]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001036:	d131      	bne.n	800109c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800103a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800103e:	4a23      	ldr	r2, [pc, #140]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001044:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001050:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001056:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2232      	movs	r2, #50	; 0x32
 800105e:	fb02 f303 	mul.w	r3, r2, r3
 8001062:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001064:	fba2 2303 	umull	r2, r3, r2, r3
 8001068:	0c9b      	lsrs	r3, r3, #18
 800106a:	3301      	adds	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800106e:	e002      	b.n	8001076 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3b01      	subs	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800107e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001082:	d102      	bne.n	800108a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f2      	bne.n	8001070 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001096:	d112      	bne.n	80010be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e011      	b.n	80010c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010ac:	e007      	b.n	80010be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40007000 	.word	0x40007000
 80010d0:	20000000 	.word	0x20000000
 80010d4:	431bde83 	.word	0x431bde83

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e306      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d075      	beq.n	80011e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010f6:	4b97      	ldr	r3, [pc, #604]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001100:	4b94      	ldr	r3, [pc, #592]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	2b0c      	cmp	r3, #12
 800110e:	d102      	bne.n	8001116 <HAL_RCC_OscConfig+0x3e>
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d002      	beq.n	800111c <HAL_RCC_OscConfig+0x44>
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2b08      	cmp	r3, #8
 800111a:	d10b      	bne.n	8001134 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	4b8d      	ldr	r3, [pc, #564]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d05b      	beq.n	80011e0 <HAL_RCC_OscConfig+0x108>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d157      	bne.n	80011e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e2e1      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800113c:	d106      	bne.n	800114c <HAL_RCC_OscConfig+0x74>
 800113e:	4b85      	ldr	r3, [pc, #532]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a84      	ldr	r2, [pc, #528]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e01d      	b.n	8001188 <HAL_RCC_OscConfig+0xb0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x98>
 8001156:	4b7f      	ldr	r3, [pc, #508]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a7e      	ldr	r2, [pc, #504]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 800115c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b7c      	ldr	r3, [pc, #496]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a7b      	ldr	r2, [pc, #492]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e00b      	b.n	8001188 <HAL_RCC_OscConfig+0xb0>
 8001170:	4b78      	ldr	r3, [pc, #480]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a77      	ldr	r2, [pc, #476]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b75      	ldr	r3, [pc, #468]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a74      	ldr	r2, [pc, #464]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d013      	beq.n	80011b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001190:	f7ff fc74 	bl	8000a7c <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001198:	f7ff fc70 	bl	8000a7c <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b64      	cmp	r3, #100	; 0x64
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e2a6      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011aa:	4b6a      	ldr	r3, [pc, #424]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0xc0>
 80011b6:	e014      	b.n	80011e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b8:	f7ff fc60 	bl	8000a7c <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fc5c 	bl	8000a7c <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	; 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e292      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011d2:	4b60      	ldr	r3, [pc, #384]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0xe8>
 80011de:	e000      	b.n	80011e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d075      	beq.n	80012da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ee:	4b59      	ldr	r3, [pc, #356]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f8:	4b56      	ldr	r3, [pc, #344]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b0c      	cmp	r3, #12
 8001206:	d102      	bne.n	800120e <HAL_RCC_OscConfig+0x136>
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d002      	beq.n	8001214 <HAL_RCC_OscConfig+0x13c>
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d11f      	bne.n	8001254 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001214:	4b4f      	ldr	r3, [pc, #316]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_OscConfig+0x154>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e265      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122c:	4b49      	ldr	r3, [pc, #292]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	061b      	lsls	r3, r3, #24
 800123a:	4946      	ldr	r1, [pc, #280]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 800123c:	4313      	orrs	r3, r2
 800123e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001240:	4b45      	ldr	r3, [pc, #276]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fbcd 	bl	80009e4 <HAL_InitTick>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d043      	beq.n	80012d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e251      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d023      	beq.n	80012a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125c:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a3c      	ldr	r2, [pc, #240]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001268:	f7ff fc08 	bl	8000a7c <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001270:	f7ff fc04 	bl	8000a7c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e23a      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128e:	4b31      	ldr	r3, [pc, #196]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	061b      	lsls	r3, r3, #24
 800129c:	492d      	ldr	r1, [pc, #180]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
 80012a2:	e01a      	b.n	80012da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a2a      	ldr	r2, [pc, #168]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 80012aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fbe4 	bl	8000a7c <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b8:	f7ff fbe0 	bl	8000a7c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e216      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x1e0>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d041      	beq.n	800136a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d01c      	beq.n	8001328 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 80012f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012f4:	4a17      	ldr	r2, [pc, #92]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fe:	f7ff fbbd 	bl	8000a7c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001306:	f7ff fbb9 	bl	8000a7c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e1ef      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 800131a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0ef      	beq.n	8001306 <HAL_RCC_OscConfig+0x22e>
 8001326:	e020      	b.n	800136a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 800132a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <HAL_RCC_OscConfig+0x27c>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff fba0 	bl	8000a7c <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800133e:	e00d      	b.n	800135c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff fb9c 	bl	8000a7c <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d906      	bls.n	800135c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1d2      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800135c:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 800135e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1ea      	bne.n	8001340 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80a6 	beq.w	80014c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800137c:	4b84      	ldr	r3, [pc, #528]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 800137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_RCC_OscConfig+0x2b4>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x2b6>
 800138c:	2300      	movs	r3, #0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00d      	beq.n	80013ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b7f      	ldr	r3, [pc, #508]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001396:	4a7e      	ldr	r2, [pc, #504]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6593      	str	r3, [r2, #88]	; 0x58
 800139e:	4b7c      	ldr	r3, [pc, #496]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 80013a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013aa:	2301      	movs	r3, #1
 80013ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ae:	4b79      	ldr	r3, [pc, #484]	; (8001594 <HAL_RCC_OscConfig+0x4bc>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d118      	bne.n	80013ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013ba:	4b76      	ldr	r3, [pc, #472]	; (8001594 <HAL_RCC_OscConfig+0x4bc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a75      	ldr	r2, [pc, #468]	; (8001594 <HAL_RCC_OscConfig+0x4bc>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fb59 	bl	8000a7c <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ce:	f7ff fb55 	bl	8000a7c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e18b      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e0:	4b6c      	ldr	r3, [pc, #432]	; (8001594 <HAL_RCC_OscConfig+0x4bc>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d108      	bne.n	8001406 <HAL_RCC_OscConfig+0x32e>
 80013f4:	4b66      	ldr	r3, [pc, #408]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 80013f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fa:	4a65      	ldr	r2, [pc, #404]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001404:	e024      	b.n	8001450 <HAL_RCC_OscConfig+0x378>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b05      	cmp	r3, #5
 800140c:	d110      	bne.n	8001430 <HAL_RCC_OscConfig+0x358>
 800140e:	4b60      	ldr	r3, [pc, #384]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001414:	4a5e      	ldr	r2, [pc, #376]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800141e:	4b5c      	ldr	r3, [pc, #368]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001424:	4a5a      	ldr	r2, [pc, #360]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800142e:	e00f      	b.n	8001450 <HAL_RCC_OscConfig+0x378>
 8001430:	4b57      	ldr	r3, [pc, #348]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001436:	4a56      	ldr	r2, [pc, #344]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001446:	4a52      	ldr	r2, [pc, #328]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d016      	beq.n	8001486 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001458:	f7ff fb10 	bl	8000a7c <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800145e:	e00a      	b.n	8001476 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001460:	f7ff fb0c 	bl	8000a7c <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	f241 3288 	movw	r2, #5000	; 0x1388
 800146e:	4293      	cmp	r3, r2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e140      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001476:	4b46      	ldr	r3, [pc, #280]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0ed      	beq.n	8001460 <HAL_RCC_OscConfig+0x388>
 8001484:	e015      	b.n	80014b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001486:	f7ff faf9 	bl	8000a7c <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800148c:	e00a      	b.n	80014a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148e:	f7ff faf5 	bl	8000a7c <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f241 3288 	movw	r2, #5000	; 0x1388
 800149c:	4293      	cmp	r3, r2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e129      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014a4:	4b3a      	ldr	r3, [pc, #232]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 80014a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1ed      	bne.n	800148e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014b2:	7ffb      	ldrb	r3, [r7, #31]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d105      	bne.n	80014c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b8:	4b35      	ldr	r3, [pc, #212]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	4a34      	ldr	r2, [pc, #208]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 80014be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d03c      	beq.n	800154a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d01c      	beq.n	8001512 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014d8:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 80014da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014de:	4a2c      	ldr	r2, [pc, #176]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e8:	f7ff fac8 	bl	8000a7c <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014f0:	f7ff fac4 	bl	8000a7c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0fa      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001502:	4b23      	ldr	r3, [pc, #140]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001504:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0ef      	beq.n	80014f0 <HAL_RCC_OscConfig+0x418>
 8001510:	e01b      	b.n	800154a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001514:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001518:	4a1d      	ldr	r2, [pc, #116]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 800151a:	f023 0301 	bic.w	r3, r3, #1
 800151e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001522:	f7ff faab 	bl	8000a7c <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800152a:	f7ff faa7 	bl	8000a7c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e0dd      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 800153e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1ef      	bne.n	800152a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80d1 	beq.w	80016f6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b0c      	cmp	r3, #12
 800155e:	f000 808b 	beq.w	8001678 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d15e      	bne.n	8001628 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_RCC_OscConfig+0x4b8>)
 8001570:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001576:	f7ff fa81 	bl	8000a7c <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800157c:	e00c      	b.n	8001598 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff fa7d 	bl	8000a7c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d905      	bls.n	8001598 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e0b3      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
 8001590:	40021000 	.word	0x40021000
 8001594:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001598:	4b59      	ldr	r3, [pc, #356]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1ec      	bne.n	800157e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a4:	4b56      	ldr	r3, [pc, #344]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	4b56      	ldr	r3, [pc, #344]	; (8001704 <HAL_RCC_OscConfig+0x62c>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6a11      	ldr	r1, [r2, #32]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015b4:	3a01      	subs	r2, #1
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	4311      	orrs	r1, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80015be:	0212      	lsls	r2, r2, #8
 80015c0:	4311      	orrs	r1, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015c6:	0852      	lsrs	r2, r2, #1
 80015c8:	3a01      	subs	r2, #1
 80015ca:	0552      	lsls	r2, r2, #21
 80015cc:	4311      	orrs	r1, r2
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015d2:	0852      	lsrs	r2, r2, #1
 80015d4:	3a01      	subs	r2, #1
 80015d6:	0652      	lsls	r2, r2, #25
 80015d8:	4311      	orrs	r1, r2
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015de:	06d2      	lsls	r2, r2, #27
 80015e0:	430a      	orrs	r2, r1
 80015e2:	4947      	ldr	r1, [pc, #284]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e8:	4b45      	ldr	r3, [pc, #276]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a44      	ldr	r2, [pc, #272]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 80015ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015f4:	4b42      	ldr	r3, [pc, #264]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4a41      	ldr	r2, [pc, #260]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 80015fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fa3c 	bl	8000a7c <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001608:	f7ff fa38 	bl	8000a7c <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e06e      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x530>
 8001626:	e066      	b.n	80016f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a34      	ldr	r2, [pc, #208]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 800162e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001632:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001634:	4b32      	ldr	r3, [pc, #200]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	4a31      	ldr	r2, [pc, #196]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 800163a:	f023 0303 	bic.w	r3, r3, #3
 800163e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 8001646:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800164a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fa14 	bl	8000a7c <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff fa10 	bl	8000a7c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e046      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800166a:	4b25      	ldr	r3, [pc, #148]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x580>
 8001676:	e03e      	b.n	80016f6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e039      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <HAL_RCC_OscConfig+0x628>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	429a      	cmp	r2, r3
 8001696:	d12c      	bne.n	80016f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	3b01      	subs	r3, #1
 80016a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d123      	bne.n	80016f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d11b      	bne.n	80016f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d113      	bne.n	80016f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	3b01      	subs	r3, #1
 80016d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e8:	085b      	lsrs	r3, r3, #1
 80016ea:	3b01      	subs	r3, #1
 80016ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d001      	beq.n	80016f6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021000 	.word	0x40021000
 8001704:	019f800c 	.word	0x019f800c

08001708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e11e      	b.n	800195e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001720:	4b91      	ldr	r3, [pc, #580]	; (8001968 <HAL_RCC_ClockConfig+0x260>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 030f 	and.w	r3, r3, #15
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d910      	bls.n	8001750 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b8e      	ldr	r3, [pc, #568]	; (8001968 <HAL_RCC_ClockConfig+0x260>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 020f 	bic.w	r2, r3, #15
 8001736:	498c      	ldr	r1, [pc, #560]	; (8001968 <HAL_RCC_ClockConfig+0x260>)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b8a      	ldr	r3, [pc, #552]	; (8001968 <HAL_RCC_ClockConfig+0x260>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e106      	b.n	800195e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d073      	beq.n	8001844 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d129      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001764:	4b81      	ldr	r3, [pc, #516]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0f4      	b.n	800195e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001774:	f000 f966 	bl	8001a44 <RCC_GetSysClockFreqFromPLLSource>
 8001778:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4a7c      	ldr	r2, [pc, #496]	; (8001970 <HAL_RCC_ClockConfig+0x268>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d93f      	bls.n	8001802 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001782:	4b7a      	ldr	r3, [pc, #488]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d009      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001796:	2b00      	cmp	r3, #0
 8001798:	d033      	beq.n	8001802 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d12f      	bne.n	8001802 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017a2:	4b72      	ldr	r3, [pc, #456]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017aa:	4a70      	ldr	r2, [pc, #448]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e024      	b.n	8001802 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c0:	4b6a      	ldr	r3, [pc, #424]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e0c6      	b.n	800195e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d0:	4b66      	ldr	r3, [pc, #408]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e0be      	b.n	800195e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80017e0:	f000 f8ce 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4a61      	ldr	r2, [pc, #388]	; (8001970 <HAL_RCC_ClockConfig+0x268>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d909      	bls.n	8001802 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80017ee:	4b5f      	ldr	r3, [pc, #380]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017f6:	4a5d      	ldr	r2, [pc, #372]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b5a      	ldr	r3, [pc, #360]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4957      	ldr	r1, [pc, #348]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001814:	f7ff f932 	bl	8000a7c <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7ff f92e 	bl	8000a7c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e095      	b.n	800195e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b4e      	ldr	r3, [pc, #312]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d023      	beq.n	8001898 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800185c:	4b43      	ldr	r3, [pc, #268]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a42      	ldr	r2, [pc, #264]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 8001862:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001866:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d007      	beq.n	8001884 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001874:	4b3d      	ldr	r3, [pc, #244]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800187c:	4a3b      	ldr	r2, [pc, #236]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 800187e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001882:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001884:	4b39      	ldr	r3, [pc, #228]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4936      	ldr	r1, [pc, #216]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
 8001896:	e008      	b.n	80018aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2b80      	cmp	r3, #128	; 0x80
 800189c:	d105      	bne.n	80018aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800189e:	4b33      	ldr	r3, [pc, #204]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4a32      	ldr	r2, [pc, #200]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 80018a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_RCC_ClockConfig+0x260>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d21d      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b8:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_RCC_ClockConfig+0x260>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 020f 	bic.w	r2, r3, #15
 80018c0:	4929      	ldr	r1, [pc, #164]	; (8001968 <HAL_RCC_ClockConfig+0x260>)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018c8:	f7ff f8d8 	bl	8000a7c <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7ff f8d4 	bl	8000a7c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e03b      	b.n	800195e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_RCC_ClockConfig+0x260>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1ed      	bne.n	80018d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4917      	ldr	r1, [pc, #92]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	490f      	ldr	r1, [pc, #60]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001932:	f000 f825 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 8001936:	4602      	mov	r2, r0
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_RCC_ClockConfig+0x264>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	490c      	ldr	r1, [pc, #48]	; (8001974 <HAL_RCC_ClockConfig+0x26c>)
 8001944:	5ccb      	ldrb	r3, [r1, r3]
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	fa22 f303 	lsr.w	r3, r2, r3
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_RCC_ClockConfig+0x270>)
 8001950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RCC_ClockConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f844 	bl	80009e4 <HAL_InitTick>
 800195c:	4603      	mov	r3, r0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40022000 	.word	0x40022000
 800196c:	40021000 	.word	0x40021000
 8001970:	04c4b400 	.word	0x04c4b400
 8001974:	08002250 	.word	0x08002250
 8001978:	20000000 	.word	0x20000000
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d102      	bne.n	8001998 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001992:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	e047      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d102      	bne.n	80019aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	e03e      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80019aa:	4b23      	ldr	r3, [pc, #140]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d136      	bne.n	8001a24 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3301      	adds	r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d10c      	bne.n	80019ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019d4:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	4a16      	ldr	r2, [pc, #88]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019de:	68d2      	ldr	r2, [r2, #12]
 80019e0:	0a12      	lsrs	r2, r2, #8
 80019e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	617b      	str	r3, [r7, #20]
      break;
 80019ec:	e00c      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019ee:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xbc>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019f8:	68d2      	ldr	r2, [r2, #12]
 80019fa:	0a12      	lsrs	r2, r2, #8
 80019fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	617b      	str	r3, [r7, #20]
      break;
 8001a06:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0e5b      	lsrs	r3, r3, #25
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	3301      	adds	r3, #1
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a20:	613b      	str	r3, [r7, #16]
 8001a22:	e001      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a28:	693b      	ldr	r3, [r7, #16]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	00f42400 	.word	0x00f42400
 8001a40:	007a1200 	.word	0x007a1200

08001a44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3301      	adds	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d10c      	bne.n	8001a82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a68:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a72:	68d2      	ldr	r2, [r2, #12]
 8001a74:	0a12      	lsrs	r2, r2, #8
 8001a76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
    break;
 8001a80:	e00c      	b.n	8001a9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a8c:	68d2      	ldr	r2, [r2, #12]
 8001a8e:	0a12      	lsrs	r2, r2, #8
 8001a90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a94:	fb02 f303 	mul.w	r3, r2, r3
 8001a98:	617b      	str	r3, [r7, #20]
    break;
 8001a9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0e5b      	lsrs	r3, r3, #25
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001ab6:	687b      	ldr	r3, [r7, #4]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	007a1200 	.word	0x007a1200
 8001acc:	00f42400 	.word	0x00f42400

08001ad0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e09d      	b.n	8001c1e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d108      	bne.n	8001afc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001af2:	d009      	beq.n	8001b08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
 8001afa:	e005      	b.n	8001b08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7fe fe9e 	bl	8000864 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b48:	d902      	bls.n	8001b50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	e002      	b.n	8001b56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001b5e:	d007      	beq.n	8001b70 <HAL_SPI_Init+0xa0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b68:	d002      	beq.n	8001b70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b80:	431a      	orrs	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb2:	ea42 0103 	orr.w	r1, r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	0c1b      	lsrs	r3, r3, #16
 8001bcc:	f003 0204 	and.w	r2, r3, #4
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001bec:	ea42 0103 	orr.w	r1, r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69da      	ldr	r2, [r3, #28]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b088      	sub	sp, #32
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	4613      	mov	r3, r2
 8001c34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_SPI_Transmit+0x22>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e158      	b.n	8001efa <HAL_SPI_Transmit+0x2d4>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c50:	f7fe ff14 	bl	8000a7c <HAL_GetTick>
 8001c54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d002      	beq.n	8001c6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c66:	2302      	movs	r3, #2
 8001c68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c6a:	e13d      	b.n	8001ee8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d002      	beq.n	8001c78 <HAL_SPI_Transmit+0x52>
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c7c:	e134      	b.n	8001ee8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2203      	movs	r2, #3
 8001c82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	88fa      	ldrh	r2, [r7, #6]
 8001c96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	88fa      	ldrh	r2, [r7, #6]
 8001c9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cc8:	d10f      	bne.n	8001cea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ce8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf4:	2b40      	cmp	r3, #64	; 0x40
 8001cf6:	d007      	beq.n	8001d08 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d10:	d94b      	bls.n	8001daa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_SPI_Transmit+0xfa>
 8001d1a:	8afb      	ldrh	r3, [r7, #22]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d13e      	bne.n	8001d9e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	881a      	ldrh	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d30:	1c9a      	adds	r2, r3, #2
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d44:	e02b      	b.n	8001d9e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d112      	bne.n	8001d7a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d58:	881a      	ldrh	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d64:	1c9a      	adds	r2, r3, #2
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d78:	e011      	b.n	8001d9e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d7a:	f7fe fe7f 	bl	8000a7c <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d803      	bhi.n	8001d92 <HAL_SPI_Transmit+0x16c>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d102      	bne.n	8001d98 <HAL_SPI_Transmit+0x172>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d102      	bne.n	8001d9e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d9c:	e0a4      	b.n	8001ee8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1ce      	bne.n	8001d46 <HAL_SPI_Transmit+0x120>
 8001da8:	e07c      	b.n	8001ea4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d002      	beq.n	8001db8 <HAL_SPI_Transmit+0x192>
 8001db2:	8afb      	ldrh	r3, [r7, #22]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d170      	bne.n	8001e9a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d912      	bls.n	8001de8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	881a      	ldrh	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	1c9a      	adds	r2, r3, #2
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3b02      	subs	r3, #2
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001de6:	e058      	b.n	8001e9a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	330c      	adds	r3, #12
 8001df2:	7812      	ldrb	r2, [r2, #0]
 8001df4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001e0e:	e044      	b.n	8001e9a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d12b      	bne.n	8001e76 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d912      	bls.n	8001e4e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e2c:	881a      	ldrh	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	1c9a      	adds	r2, r3, #2
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b02      	subs	r3, #2
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e4c:	e025      	b.n	8001e9a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	330c      	adds	r3, #12
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e74:	e011      	b.n	8001e9a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e76:	f7fe fe01 	bl	8000a7c <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d803      	bhi.n	8001e8e <HAL_SPI_Transmit+0x268>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d102      	bne.n	8001e94 <HAL_SPI_Transmit+0x26e>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d102      	bne.n	8001e9a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e98:	e026      	b.n	8001ee8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1b5      	bne.n	8001e10 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	6839      	ldr	r1, [r7, #0]
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f949 	bl	8002140 <SPI_EndRxTxTransaction>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10a      	bne.n	8001ed8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	77fb      	strb	r3, [r7, #31]
 8001ee4:	e000      	b.n	8001ee8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001ee6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001ef8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	4613      	mov	r3, r2
 8001f12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f14:	f7fe fdb2 	bl	8000a7c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	4413      	add	r3, r2
 8001f22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f24:	f7fe fdaa 	bl	8000a7c <HAL_GetTick>
 8001f28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f2a:	4b39      	ldr	r3, [pc, #228]	; (8002010 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	015b      	lsls	r3, r3, #5
 8001f30:	0d1b      	lsrs	r3, r3, #20
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f3a:	e054      	b.n	8001fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f42:	d050      	beq.n	8001fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f44:	f7fe fd9a 	bl	8000a7c <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d902      	bls.n	8001f5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d13d      	bne.n	8001fd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f72:	d111      	bne.n	8001f98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f7c:	d004      	beq.n	8001f88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f86:	d107      	bne.n	8001f98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fa0:	d10f      	bne.n	8001fc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e017      	b.n	8002006 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	bf0c      	ite	eq
 8001ff6:	2301      	moveq	r3, #1
 8001ff8:	2300      	movne	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	429a      	cmp	r2, r3
 8002002:	d19b      	bne.n	8001f3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000000 	.word	0x20000000

08002014 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002026:	f7fe fd29 	bl	8000a7c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	4413      	add	r3, r2
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002036:	f7fe fd21 	bl	8000a7c <HAL_GetTick>
 800203a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	330c      	adds	r3, #12
 8002042:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002044:	4b3d      	ldr	r3, [pc, #244]	; (800213c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00da      	lsls	r2, r3, #3
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	0d1b      	lsrs	r3, r3, #20
 8002054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002056:	fb02 f303 	mul.w	r3, r2, r3
 800205a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800205c:	e060      	b.n	8002120 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002064:	d107      	bne.n	8002076 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d104      	bne.n	8002076 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002074:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d050      	beq.n	8002120 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800207e:	f7fe fcfd 	bl	8000a7c <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208a:	429a      	cmp	r2, r3
 800208c:	d902      	bls.n	8002094 <SPI_WaitFifoStateUntilTimeout+0x80>
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	2b00      	cmp	r3, #0
 8002092:	d13d      	bne.n	8002110 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020ac:	d111      	bne.n	80020d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020b6:	d004      	beq.n	80020c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c0:	d107      	bne.n	80020d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020da:	d10f      	bne.n	80020fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e010      	b.n	8002132 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	3b01      	subs	r3, #1
 800211e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	d196      	bne.n	800205e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3728      	adds	r7, #40	; 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000000 	.word	0x20000000

08002140 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af02      	add	r7, sp, #8
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2200      	movs	r2, #0
 8002154:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f7ff ff5b 	bl	8002014 <SPI_WaitFifoStateUntilTimeout>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e027      	b.n	80021c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2200      	movs	r2, #0
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff fec0 	bl	8001f04 <SPI_WaitFlagStateUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218e:	f043 0220 	orr.w	r2, r3, #32
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e014      	b.n	80021c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff ff34 	bl	8002014 <SPI_WaitFifoStateUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d007      	beq.n	80021c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b6:	f043 0220 	orr.w	r2, r3, #32
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e000      	b.n	80021c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <memset>:
 80021cc:	4402      	add	r2, r0
 80021ce:	4603      	mov	r3, r0
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d100      	bne.n	80021d6 <memset+0xa>
 80021d4:	4770      	bx	lr
 80021d6:	f803 1b01 	strb.w	r1, [r3], #1
 80021da:	e7f9      	b.n	80021d0 <memset+0x4>

080021dc <__libc_init_array>:
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	4d0d      	ldr	r5, [pc, #52]	; (8002214 <__libc_init_array+0x38>)
 80021e0:	4c0d      	ldr	r4, [pc, #52]	; (8002218 <__libc_init_array+0x3c>)
 80021e2:	1b64      	subs	r4, r4, r5
 80021e4:	10a4      	asrs	r4, r4, #2
 80021e6:	2600      	movs	r6, #0
 80021e8:	42a6      	cmp	r6, r4
 80021ea:	d109      	bne.n	8002200 <__libc_init_array+0x24>
 80021ec:	4d0b      	ldr	r5, [pc, #44]	; (800221c <__libc_init_array+0x40>)
 80021ee:	4c0c      	ldr	r4, [pc, #48]	; (8002220 <__libc_init_array+0x44>)
 80021f0:	f000 f818 	bl	8002224 <_init>
 80021f4:	1b64      	subs	r4, r4, r5
 80021f6:	10a4      	asrs	r4, r4, #2
 80021f8:	2600      	movs	r6, #0
 80021fa:	42a6      	cmp	r6, r4
 80021fc:	d105      	bne.n	800220a <__libc_init_array+0x2e>
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
 8002200:	f855 3b04 	ldr.w	r3, [r5], #4
 8002204:	4798      	blx	r3
 8002206:	3601      	adds	r6, #1
 8002208:	e7ee      	b.n	80021e8 <__libc_init_array+0xc>
 800220a:	f855 3b04 	ldr.w	r3, [r5], #4
 800220e:	4798      	blx	r3
 8002210:	3601      	adds	r6, #1
 8002212:	e7f2      	b.n	80021fa <__libc_init_array+0x1e>
 8002214:	08002260 	.word	0x08002260
 8002218:	08002260 	.word	0x08002260
 800221c:	08002260 	.word	0x08002260
 8002220:	08002264 	.word	0x08002264

08002224 <_init>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	bf00      	nop
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr

08002230 <_fini>:
 8002230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002232:	bf00      	nop
 8002234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002236:	bc08      	pop	{r3}
 8002238:	469e      	mov	lr, r3
 800223a:	4770      	bx	lr
